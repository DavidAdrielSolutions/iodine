{"version":3,"file":"iodine.min.umd.js","sources":["../src/iodine.js"],"sourcesContent":["/*\n|--------------------------------------------------------------------------\n| Iodine - JavaScript Library\n|--------------------------------------------------------------------------\n|\n| This library contains a collection of useful validation rules that can\n| be used to quickly verify whether items meet certain conditions.\n|\n*/\nexport class Iodine {\n  /**\n   * Constructor.\n   *\n   **/\n  constructor() {\n    this.locale = undefined;\n    this.messages = this._defaultMessages();\n    this.defaultFieldName = \"Value\";\n  }\n\n  /**\n   * @internal.\n   *\n   **/\n  _dateCompare(first, second, type, equals = false) {\n    if (!this.isDate(first)) return false;\n\n    if (!this.isDate(second) && !this.isInteger(second)) return false;\n\n    second = typeof second === \"number\" ? second : second.getTime();\n\n    if (type === \"less\" && equals) return first.getTime() <= second;\n    if (type === \"less\" && !equals) return first.getTime() < second;\n    if (type === \"more\" && equals) return first.getTime() >= second;\n    if (type === \"more\" && !equals) return first.getTime() > second;\n  }\n\n  /**\n   * @internal.\n   *\n   **/\n  _defaultMessages() {\n    return {\n      after: `The date must be after: '[PARAM]'`,\n      afterOrEqual: `The date must be after or equal to: '[PARAM]'`,\n      array: `[FIELD] must be an array`,\n      before: `The date must be before: '[PARAM]'`,\n      beforeOrEqual: `The date must be before or equal to: '[PARAM]'`,\n      boolean: `[FIELD] must be true or false`,\n      date: `[FIELD] must be a date`,\n      different: `[FIELD] must be different to '[PARAM]'`,\n      endingWith: `[FIELD] must end with '[PARAM]'`,\n      email: `[FIELD] must be a valid email address`,\n      falsy: `[FIELD] must be a falsy value (false, 'false', 0 or '0')`,\n      in: `[FIELD] must be one of the following options: [PARAM]`,\n      integer: `[FIELD] must be an integer`,\n      json: `[FIELD] must be a parsable JSON object string`,\n      maximum: `[FIELD] must not be greater than '[PARAM]' in size or character length`,\n      minimum: `[FIELD] must not be less than '[PARAM]' in size or character length`,\n      notIn: `[FIELD] must not be one of the following options: [PARAM]`,\n      numeric: `[FIELD] must be numeric`,\n      optional: `[FIELD] is optional`,\n      regexMatch: `[FIELD] must satisify the regular expression: [PARAM]`,\n      required: `[FIELD] must be present`,\n      same: `[FIELD] must be '[PARAM]'`,\n      startingWith: `[FIELD] must start with '[PARAM]'`,\n      string: `[FIELD] must be a string`,\n      truthy: `[FIELD] must be a truthy value (true, 'true', 1 or '1')`,\n      url: `[FIELD] must be a valid url`,\n      uuid: `[FIELD] must be a valid UUID`,\n    };\n  }\n\n  /**\n   * Attach a custom validation rule to the library.\n   *\n   **/\n  addRule(name, closure) {\n    Iodine.prototype[`is${name[0].toUpperCase()}${name.slice(1)}`] = closure;\n  }\n\n  /**\n   * Retrieve an error message for the given rule.\n   *\n   **/\n  getErrorMessage(rule, args = undefined) {\n    let { param, field } =\n      typeof args === \"object\" ? args : { param: args, field: undefined };\n\n    const chunks = rule.split(\":\");\n    let key = chunks.shift();\n    param = param || chunks.join(\":\");\n\n    if ([\"after\", \"afterOrEqual\", \"before\", \"beforeOrEqual\"].includes(key)) {\n      param = new Date(parseInt(param)).toLocaleTimeString(this.locale, {\n        year: \"numeric\",\n        month: \"short\",\n        day: \"numeric\",\n        hour: \"2-digit\",\n        minute: \"numeric\",\n        hour12: false,\n      });\n    }\n\n    let message = [null, undefined, \"\"].includes(param)\n      ? this.messages[key]\n      : this.messages[key].replace(\"[PARAM]\", param);\n\n    return [null, undefined, \"\"].includes(field)\n      ? message.replace(\"[FIELD]\", this.defaultFieldName)\n      : message.replace(\"[FIELD]\", field);\n  }\n\n  /**\n   * Determine if the given date is after another given date.\n   *\n   **/\n  isAfter(value, after) {\n    return this._dateCompare(value, after, \"more\", false);\n  }\n\n  /**\n   * Determine if the given date is after or equal to another given date.\n   *\n   **/\n  isAfterOrEqual(value, after) {\n    return this._dateCompare(value, after, \"more\", true);\n  }\n\n  /**\n   * Determine if the given value is an array.\n   *\n   **/\n  isArray(value) {\n    return Array.isArray(value);\n  }\n\n  /**\n   * Determine if the given date is before another given date.\n   *\n   **/\n  isBefore(value, before) {\n    return this._dateCompare(value, before, \"less\", false);\n  }\n\n  /**\n   * Determine if the given date is before or equal to another given date.\n   *\n   **/\n  isBeforeOrEqual(value, before) {\n    return this._dateCompare(value, before, \"less\", true);\n  }\n\n  /**\n   * Determine if the given value is a boolean.\n   *\n   **/\n  isBoolean(value) {\n    return [true, false].includes(value);\n  }\n\n  /**\n   * Determine if the given value is a date object.\n   *\n   **/\n  isDate(value) {\n    return (\n      value &&\n      Object.prototype.toString.call(value) === \"[object Date]\" &&\n      !isNaN(value)\n    );\n  }\n\n  /**\n   * Determine if the given value is different to another given value.\n   *\n   **/\n  isDifferent(value, different) {\n    return value != different;\n  }\n\n  /**\n   * Determine if the given value ends with another given value.\n   *\n   **/\n  isEndingWith(value, sub) {\n    return this.isString(value) && value.endsWith(sub);\n  }\n\n  /**\n   * Determine if the given value is a valid email address.\n   *\n   **/\n  isEmail(value) {\n    return new RegExp(\"^\\\\S+@\\\\S+[\\\\.][0-9a-z]+$\").test(\n      String(value).toLowerCase()\n    );\n  }\n\n  /**\n   * Determine if the given value is falsy.\n   *\n   **/\n  isFalsy(value) {\n    return [0, \"0\", false, \"false\"].includes(value);\n  }\n\n  /**\n   * Determine if the given value is within the given array of options.\n   *\n   **/\n  isIn(value, options) {\n    options = typeof options === \"string\" ? options.split(\",\") : options;\n\n    return options.includes(value);\n  }\n\n  /**\n   * Determine if the given value is an integer.\n   *\n   **/\n  isInteger(value) {\n    return (\n      Number.isInteger(value) && parseInt(value).toString() === value.toString()\n    );\n  }\n\n  /**\n   * Determine if the given value is a JSON string.\n   *\n   **/\n  isJson(value) {\n    try {\n      return typeof JSON.parse(value) === \"object\";\n    } catch (e) {\n      return false;\n    }\n  }\n\n  /**\n   * Determine if the given value meets the given maximum limit.\n   *\n   **/\n  isMaximum(value, limit) {\n    value = typeof value === \"string\" ? value.length : value;\n\n    return parseFloat(value) <= limit;\n  }\n\n  /**\n   * Determine if the given value meets the given minimum limit.\n   *\n   **/\n  isMinimum(value, limit) {\n    value = typeof value === \"string\" ? value.length : value;\n\n    return parseFloat(value) >= limit;\n  }\n\n  /**\n   * Determine if the given value is not within the given array of options.\n   *\n   **/\n  isNotIn(value, options) {\n    return !this.isIn(value, options);\n  }\n\n  /**\n   * Determine if the given value is numeric (an integer or a float).\n   *\n   **/\n  isNumeric(value) {\n    return !isNaN(parseFloat(value)) && isFinite(value);\n  }\n\n  /**\n   * Determine if the given value is optional.\n   *\n   **/\n  isOptional(value) {\n    return [null, undefined, \"\"].includes(value);\n  }\n\n  /**\n   * Determine if the given value satisifies the given regular expression.\n   *\n   **/\n  isRegexMatch(value, expression) {\n    return new RegExp(expression).test(String(value));\n  }\n\n  /**\n   * Determine if the given value is present.\n   *\n   **/\n  isRequired(value) {\n    return !this.isOptional(value);\n  }\n\n  /**\n   * Determine if the given value is the same as another given value.\n   *\n   **/\n  isSame(value, same) {\n    return value == same;\n  }\n\n  /**\n   * Determine if the given value starts with another given value.\n   *\n   **/\n  isStartingWith(value, sub) {\n    return this.isString(value) && value.startsWith(sub);\n  }\n\n  /**\n   * Determine if the given value is a string.\n   *\n   **/\n  isString(value) {\n    return typeof value === \"string\";\n  }\n\n  /**\n   * Determine if the given value is truthy.\n   *\n   **/\n  isTruthy(value) {\n    return [1, \"1\", true, \"true\"].includes(value);\n  }\n\n  /**\n   * Determine if the given value is a valid URL.\n   *\n   **/\n  isUrl(value) {\n    return new RegExp(\n      \"^(https?:\\\\/\\\\/)?((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*(\\\\?[;&a-z\\\\d%_.~+=-]*)?(\\\\#[-a-z\\\\d_]*)?$\"\n    ).test(String(value).toLowerCase());\n  }\n\n  /**\n   * Determine if the given value is a valid UUID.\n   *\n   **/\n  isUuid(value) {\n    return new RegExp(\n      \"^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$\"\n    ).test(String(value).toLowerCase());\n  }\n\n  /**\n   * Determine whether the given value meets the given rules.\n   *\n   **/\n  is(value, rules = []) {\n    if (!rules.length) return true;\n\n    if (rules[0] === \"optional\" && this.isOptional(value)) return true;\n\n    for (let index in rules) {\n      if (rules[index] === \"optional\") continue;\n\n      const chunks = rules[index].split(\":\");\n      const ruleName = chunks.shift();\n      let rule = ruleName[0].toUpperCase() + ruleName.slice(1);\n\n      let result = this[`is${rule}`].apply(this, [value, chunks.join(\":\")]);\n\n      if (!result) return rules[index];\n    }\n\n    return true;\n  }\n\n  /**\n   * Determine whether the given value meets the given rules.\n   * @returns true if the item passes every rule, otherwise returns false\n   **/\n  isValid(value, rules = []) {\n    return this.is(value, rules) === true;\n  }\n\n  /**\n   * Replace the default error messages with a new set.\n   *\n   **/\n  setErrorMessages(messages) {\n    this.messages = messages;\n  }\n\n  /**\n   * Add or replace an error message.\n   *\n   **/\n  setErrorMessage(key, message) {\n    this.messages[key] = message;\n  }\n\n  /**\n   * Replace the default locale with a new value.\n   *\n   **/\n  setLocale(locale) {\n    this.locale = locale;\n  }\n\n  /**\n   * Replace the default field name with a new value.\n   */\n  setDefaultFieldName(fieldName) {\n    this.defaultFieldName = fieldName;\n  }\n}\n\n/**\n * Create an instance of the library.\n *\n **/\nwindow.Iodine = new Iodine();\n"],"names":["Iodine","constructor","this","locale","undefined","messages","_defaultMessages","defaultFieldName","_dateCompare","first","second","type","equals","isDate","isInteger","getTime","after","afterOrEqual","array","before","beforeOrEqual","boolean","date","different","endingWith","email","falsy","in","integer","json","maximum","minimum","notIn","numeric","optional","regexMatch","required","same","startingWith","string","truthy","url","uuid","addRule","name","closure","prototype","toUpperCase","slice","getErrorMessage","rule","args","param","field","chunks","split","key","shift","join","includes","Date","parseInt","toLocaleTimeString","year","month","day","hour","minute","hour12","message","replace","isAfter","value","isAfterOrEqual","isArray","Array","isBefore","isBeforeOrEqual","isBoolean","Object","toString","call","isNaN","isDifferent","isEndingWith","sub","isString","endsWith","isEmail","RegExp","test","String","toLowerCase","isFalsy","isIn","options","Number","isJson","JSON","parse","e","isMaximum","limit","length","parseFloat","isMinimum","isNotIn","isNumeric","isFinite","isOptional","isRegexMatch","expression","isRequired","isSame","isStartingWith","startsWith","isTruthy","isUrl","isUuid","is","rules","index","ruleName","apply","isValid","setErrorMessages","setErrorMessage","setLocale","setDefaultFieldName","fieldName","window"],"mappings":"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"}